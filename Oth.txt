@Test
void testCurrencyMismatchTriggersAlert() {
    Receivable receivable = Receivable.builder()
        .receivableId("REC123")
        .build();

    EventDetail detail = EventDetail.builder()
        .businessLine("WM")
        .domesticIndicator(false)
        .build();

    EventOption option = EventOption.builder()
        .paymentCurrency("USD")
        .paymentType("IT")
        .build();

    Event event = Event.builder()
        .eventDetail(detail)
        .eventOptions(List.of(option))
        .build();

    EventSearchResponse.EventDetails eventDetails = new EventSearchResponse.EventDetails();
    eventDetails.setEventId("1001");

    Pair<EventSearchResponse.EventDetails, String> eventPair = Pair.of(eventDetails, "dummy");

    when(linkingService.linkToGlassEvent(any(), any(), any(), any(), anyBoolean()))
        .thenReturn(ResponseEntity.ok(eventPair));

    when(eventService.getEventByEventId(anyLong(), any())).thenReturn(event);
    when(paymentUtils.isReceivableCurrencyMatching(any(), any())).thenReturn(false);
    when(userNameService.getCurrentUser()).thenReturn("pranjal");

    linkingReceivableService.reprocessLinkedReceivable("REC123", true);

    verify(alertService).raiseAlertForWNCurrencyMismatchNonDomestic(eq(receivable), eq(event), eq("pranjal"));
}

@Test
void testCurrencyMatchedSkipsAlert() {
    Receivable receivable = Receivable.builder()
        .receivableId("REC124")
        .build();

    EventDetail detail = EventDetail.builder()
        .businessLine("WM")
        .domesticIndicator(false)
        .build();

    EventOption option = EventOption.builder()
        .paymentCurrency("USD")
        .paymentType("IT")
        .build();

    Event event = Event.builder()
        .eventDetail(detail)
        .eventOptions(List.of(option))
        .build();

    EventSearchResponse.EventDetails eventDetails = new EventSearchResponse.EventDetails();
    eventDetails.setEventId("1002");

    Pair<EventSearchResponse.EventDetails, String> eventPair = Pair.of(eventDetails, "dummy");

    when(linkingService.linkToGlassEvent(any(), any(), any(), any(), anyBoolean()))
        .thenReturn(ResponseEntity.ok(eventPair));

    when(eventService.getEventByEventId(anyLong(), any())).thenReturn(event);
    when(paymentUtils.isReceivableCurrencyMatching(any(), any())).thenReturn(true);

    linkingReceivableService.reprocessLinkedReceivable("REC124", true);

    verify(alertService, never()).raiseAlertForWNCurrencyMismatchNonDomestic(any(), any(), any());
}

@Test
void testNotWMOrDomesticSkipsAlertBlock() {
    Receivable receivable = Receivable.builder()
        .receivableId("REC125")
        .build();

    EventDetail detail = EventDetail.builder()
        .businessLine("INST") // Not WM
        .domesticIndicator(false)
        .build();

    EventOption option = EventOption.builder().build();

    Event event = Event.builder()
        .eventDetail(detail)
        .eventOptions(List.of(option))
        .build();

    EventSearchResponse.EventDetails eventDetails = new EventSearchResponse.EventDetails();
    eventDetails.setEventId("1003");

    Pair<EventSearchResponse.EventDetails, String> eventPair = Pair.of(eventDetails, "dummy");

    when(linkingService.linkToGlassEvent(any(), any(), any(), any(), anyBoolean()))
        .thenReturn(ResponseEntity.ok(eventPair));

    when(eventService.getEventByEventId(anyLong(), any())).thenReturn(event);

    linkingReceivableService.reprocessLinkedReceivable("REC125", true);

    verify(alertService, never()).raiseAlertForWNCurrencyMismatchNonDomestic(any(), any(), any());
}
