class PaymentUtilsTest {

    private PaymentUtils utils;

    @BeforeEach
    void setup() {
        utils = new PaymentUtils();
    }

    @Test
    void test_MatchByPayoutTypeAndCurrency() {
        PaymentSummary summary = builder("IT", "IT", "USD", "USD", false, false, false);
        assertTrue(utils.checkIfCurrencyMatches(summary));
    }

    @Test
    void test_PayoutTypeMatchesButCurrencyMismatch() {
        PaymentSummary summary = builder("IT", "IT", "USD", "EUR", false, false, false);
        assertFalse(utils.checkIfCurrencyMatches(summary));
    }

    @Test
    void test_NoTypeMatch_ButCurrencyMatchesInAnyOption() {
        PaymentSummary summary = builder("XX", "IT", "USD", "USD", false, false, false);
        assertTrue(utils.checkIfCurrencyMatches(summary));
    }

    @Test
    void test_NoTypeMatch_AndNoCurrencyMatch() {
        PaymentSummary summary = builder("XX", "IT", "INR", "USD", false, false, false);
        assertFalse(utils.checkIfCurrencyMatches(summary));
    }

    @Test
    void test_AllEventOptionsCancelled() {
        PaymentSummary summary = builder("IT", "IT", "USD", "USD", false, true, false);
        assertFalse(utils.checkIfCurrencyMatches(summary));
    }

    @Test
    void test_EventIsDomestic_ShouldSkipCurrencyCheck() {
        PaymentSummary summary = builder("IT", "IT", "USD", "EUR", true, false, false);
        assertTrue(utils.checkIfCurrencyMatches(summary));
    }

    @Test
    void test_EventIsNull() {
        PaymentSummary summary = PaymentSummary.builder().event(null).build();
        assertFalse(utils.checkIfCurrencyMatches(summary));
    }

    @Test
    void test_ReceivablesEmpty() {
        PaymentSummary summary = PaymentSummary.builder()
                .event(validEvent("IT", "USD", false, false))
                .linkedReceivables(Collections.emptyList())
                .build();
        assertFalse(utils.checkIfCurrencyMatches(summary));
    }

    @Test
    void test_PayoutTypeIsNullInReceivable() {
        LinkedReceivable receivable = LinkedReceivable.builder()
                .currency("USD")
                .payoutType(null) // ðŸ”¥ missing
                .build();

        EventOption option = EventOption.builder().paymentType("IT").paymentCurrency("USD").build();

        Event event = Event.builder()
                .eventDetail(Event.EventDetail.builder().domesticIndicator(false).build())
                .eventOptions(List.of(option))
                .build();

        PaymentSummary summary = PaymentSummary.builder()
                .event(event)
                .linkedReceivables(List.of(receivable))
                .build();

        assertFalse(utils.checkIfCurrencyMatches(summary));
    }

    // ðŸ”§ Reusable test data builder
    private PaymentSummary builder(String receivableType, String optionType,
                                   String receivableCurrency, String optionCurrency,
                                   boolean isDomestic, boolean cancelOption, boolean receivableNull) {

        LinkedReceivable receivable = receivableNull ? null :
                LinkedReceivable.builder()
                        .currency(receivableCurrency)
                        .payoutType(receivableType)
                        .build();

        EventOption option = EventOption.builder()
                .paymentType(optionType)
                .paymentCurrency(optionCurrency)
                .cancelledIndicator(cancelOption)
                .build();

        Event event = Event.builder()
                .eventDetail(Event.EventDetail.builder()
                        .domesticIndicator(isDomestic)
                        .build())
                .eventOptions(List.of(option))
                .build();

        return PaymentSummary.builder()
                .event(event)
                .linkedReceivables(receivableNull ? null : List.of(receivable))
                .build();
    }

    // Optional valid event without cancellation
    private Event validEvent(String type, String currency, boolean domestic, boolean cancel) {
        return Event.builder()
                .eventDetail(Event.EventDetail.builder()
                        .domesticIndicator(domestic)
                        .build())
                .eventOptions(List.of(EventOption.builder()
                        .paymentType(type)
                        .paymentCurrency(currency)
                        .cancelledIndicator(cancel)
                        .build()))
                .build();
    }
}
